version: ${DOCKER_COMPOSE_VERSION}
services:
  mongodb:
    image: mongo:${MONGO_VERSION}
    container_name: ${MONGO_CONTAINER_NAME}
    profiles:
      - default
    env_file:
      - .env.mongodb
    restart: always
    networks:
      - omfdydx
    volumes:
      - type: volume
        source: mongodb
        target: /data/db
    ports:
      - ${MONGO_PORT}:${MONGO_DEFAULT_PORT}
  emqx:
    image: emqx:${EMQX_VERSION}
    container_name: ${EMQX_CONTAINER_NAME}
    profiles:
      - default
    restart: always
    env_file:
      - ./.env.emqx
    networks:
      - omfdydx
    volumes:
      - type: volume
        source: emqxdb
        target: /opt/emqx
    ports:
      - ${EMQX_TCP}:${EMQX_TCP_DEFAULT}
      - ${EMQX_DASHBOARD}:${EMQX_DASHBOARD_DEFAULT}
  elasticsearch-setup:
    image: elastic/elasticsearch:${ELASTICSEARCH_VERSION}
    container_name: ${ELASTICSEARCH_SETUP_CONTAINER_NAME}
    profiles:
      - setup_elk
    networks:
      - omfdydx
    env_file:
      - ./.env.elasticsearch
    volumes:
      - type: volume
        source: elasticcertsdb
        target: /usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "      - elasticsearch\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: kibana\n"\
          "    dns:\n"\
          "      - kibana\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 770 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://elasticsearch:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://elasticsearch:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: [ "CMD-SHELL", "[ -f config/certs/es01/es01.crt ]" ]
      interval: 1s
      timeout: 5s
      retries: 120

  elasticsearch:
    image: elastic/elasticsearch:${ELASTICSEARCH_VERSION}
    container_name: ${ELASTICSEARCH_CONTAINER_NAME}
    profiles:
      - default
    restart: always
    env_file:
      - ./.env.elasticsearch
    networks:
      - omfdydx
    volumes:
      - type: volume
        source: elasticsearchdb
        target: /usr/share/elasticsearch
      - type: volume
        source: elasticcertsdb
        target: /usr/share/elasticsearch/config/certs
    labels:
      co.elastic.logs/module: elasticsearch
    ports:
      - ${ELASTICSEARCH_TCP}:${ELASTICSEARCH_TCP_DEFAULT}
      - ${ELASTICSEARCH_TRANSPORT}:${ELASTICSEARCH_TRANSPORT_DEFAULT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    depends_on:
      elasticsearch:
        condition: service_healthy
    image: elastic/kibana:${ELASTICSEARCH_VERSION}
    container_name: ${KIBANA_CONTAINER_NAME}
    profiles:
      - default
    networks:
      - omfdydx
    labels:
      co.elastic.logs/module: kibana
    volumes:
      - type: volume
        source: kibanadata
        target: /usr/share/kibana/data
      - type: volume
        source: elasticcertsdb
        target: /usr/share/kibana/config/certs
    ports:
      - ${KIBANA_TCP}:${KIBANA_TCP_DEFAULT}
    env_file:
      - ./.env.elasticsearch
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  postgresql:
    image: postgres:${POSTGRESQL_VERSION}
    container_name: ${POSTGRESQL_CONTAINER_NAME}
    profiles:
      - default
    networks:
      - omfdydx
    volumes:
      - type: volume
        source: postgresqldata
        target: /var/lib/postgresql/data
    ports:
      - ${POSTGRESQL_TCP}:${POSTGRESQL_TCP_DEFAULT}
    env_file:
      - ./.env.postgresql
  redis:
    image: redis:${REDIS_VERSION}
    command: /bin/sh -c "redis-server --requirepass $$REDIS_PASSWORD"
    container_name: ${REDIS_CONTAINER_NAME}
    profiles:
      - default
    networks:
      - omfdydx
    volumes:
      - type: volume
        source: redisdata
        target: /data
    ports:
      - ${REDIS_TCP}:${REDIS_TCP_DEFAULT}
    env_file:
      - ./.env.redis
  kafka:
    image: bitnami/kafka:${KAFKA_VERSION}
    container_name: ${KAFKA_CONTAINER_NAME}
    hostname: kafka
    profiles:
      - default
    networks:
      omfdydx:
        aliases:
          - kafka.local
    volumes:
      - ./secrets/client.properties:/opt/bitnami/kafka/config/client.properties
      - ./secrets/certs:/opt/bitnami/kafka/config/certs
      - type: volume
        source: kafkadata
        target: /bitnami/kafka
    environment:
      - KAFKA_CERTIFICATE_PASSWORD=${KAFKA_ZOOKEEPER_TLS_PASSWORD}
    env_file:
      - ./.env.kafka
  simple-kafka:
    image: bitnami/kafka:${KAFKA_VERSION}
    container_name: ${SAFKA_CONTAINER_NAME}
    hostname: kafka
    profiles:
      - default
    volumes:
      - type: volume
        source: safkadata
        target: /bitnami/kafka
    networks:
      omfdydx:
        aliases:
          - safka.local
    env_file:
      - ./.env.safka
    ports:
      - ${SAFKA_PORT}:${SAFKA_PORT_DEFAULT}


#Volumes & Networks listed
volumes:
  mongodb:
    name: ${MONGO_VOLUME_NAME}
  emqxdb:
    name: ${EMQX_VOLUME_NAME}
  elasticsearchdb:
    name: ${ELASTICSEARCH_VOLUME_NAME}
  elasticcertsdb:
    name: ${ELASTICSEARCH_CERTS_VOLUME_NAME}
  kibanadata:
    name: ${KIBANA_VOLUME_NAME}
  postgresqldata:
    name: ${POSTGRESQL_VOLUME_NAME}
  redisdata:
    name: ${REDIS_VOLUME_NAME}
  kafkadata:
    name: ${KAFKA_VOLUME_NAME}
  safkadata:
    name: ${SAFKA_VOLUME_NAME}
networks:
  omfdydx:
    name: ${DOCKER_NETWORK}